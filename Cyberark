#!/usr/bin/env bash
# get_aim_password.sh
# Interactive helper to query CyberArk AIM (clipasswordsdk) where object is "<hostname>-<username>"

set -euo pipefail

# ----------------- CONFIG -----------------
CLI="/opt/CARKaim/sdk/clipasswordsdk"    # path to CyberArk AIM binary
APPID="SPLUNK-PROD"                      # AppDescs.AppID value
SAFES=(                                   # list of safes shown in menu (edit to taste)
  "APP_SPLUNK-SPLUNK_P"
  "APP_DB_ADMIN"
  "APP_WEBSITES"
)
# ------------------------------------------

# show menu
echo "Available safes:"
for i in "${!SAFES[@]}"; do
  printf "  %2d) %s\n" $((i+1)) "${SAFES[$i]}"
done

# get safe selection
read -rp $'Select safe number: ' selection
if ! [[ "$selection" =~ ^[0-9]+$ ]]; then
  echo "Invalid selection: not a number" >&2
  exit 2
fi
sel_index=$((selection-1))
if (( sel_index < 0 || sel_index >= ${#SAFES[@]} )); then
  echo "Invalid selection: out of range" >&2
  exit 2
fi
SAFE="${SAFES[$sel_index]}"

# get hostname (website/server) and username separately
read -rp $'Enter hostname (e.g. splunkcloudgc.com) : ' HOSTNAME
read -rp $'Enter username (e.g. splunkmaintenance)    : ' USERNAME

# join into object as "<hostname>-<username>"
OBJECT="${HOSTNAME}-${USERNAME}"

# build Query exactly like in your environment
QUERY="safe=${SAFE};folder=Root;object=${OBJECT}"

# verify CLI exists & is executable
if [[ ! -x "$CLI" ]]; then
  echo "ERROR: CyberArk AIM client not found or not executable at: $CLI" >&2
  exit 3
fi

# Build command as an array (safe against word splitting)
cmd=(
  "$CLI"
  GetPassword
  -p "AppDescs.AppID=${APPID}"
  -p "Query=${QUERY}"
  -o Password
)

echo
echo "About to run command (safe=${SAFE} object=${OBJECT}):"
printf "  %q " "${cmd[@]}"
echo

read -rn1 -p $'\nRun it? (y/N) ' CONFIRM
echo
if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
  echo "Aborted."
  exit 0
fi

# Execute command and capture output
set +o errexit
OUTPUT="$("${cmd[@]}" 2>&1)"
RC=$?
set -o errexit

if (( RC != 0 )); then
  echo "Command failed with exit code $RC"
  echo "Full output:"
  echo "$OUTPUT"
  exit $RC
fi

# Try to extract password cleanly:
# - Many AIM clients show a line like "Password=theSecret" or "Password : theSecret"
# - We'll look for a line containing 'Password' and print the RHS if found.
PASSWORD_LINE="$(printf "%s\n" "$OUTPUT" | grep -i 'password' | head -n1 || true)"

if [[ -n "$PASSWORD_LINE" ]]; then
  # split on = or : and trim
  if [[ "$PASSWORD_LINE" == *"="* ]]; then
    SECRET="$(printf '%s' "$PASSWORD_LINE" | awk -F'=' '{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//')"
  elif [[ "$PASSWORD_LINE" == *":"* ]]; then
    SECRET="$(printf '%s' "$PASSWORD_LINE" | awk -F':' '{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//')"
  else
    SECRET="$PASSWORD_LINE"
  fi
  echo
  echo "---- PASSWORD ----"
  printf '%s\n' "$SECRET"
  echo "------------------"
else
  # no 'Password' line found; show full output
  echo
  echo "---- OUTPUT ----"
  printf '%s\n' "$OUTPUT"
  echo "----------------"
fi

# optional: clear sensitive vars in memory (best-effort)
HOSTNAME=''
USERNAME=''
OBJECT=''
QUERY=''
SECRET=''
OUTPUT=''
