#!/usr/bin/env bash
set -euo pipefail

# === Config ===
CLASS="_Restart_Forwarder"
HOST="${1:-}"
SPLUNK_HOME_DEFAULT="/opt/splunk"  # change if needed
SERVERCLASS_PATH="${SPLUNK_HOME:-$SPLUNK_HOME_DEFAULT}/etc/system/local/serverclass.conf"
RELOAD_SCRIPT="$(dirname "$0")/reload_ds.sh"   # assumes reload_ds.sh is next to this script

die(){ echo "ERROR: $*" >&2; exit 1; }
info(){ echo "[*] $*"; }

[[ -n "$HOST" ]] || die "Usage: $0 <deployment_client_hostname>"
[[ -x "$RELOAD_SCRIPT" ]] || die "Cannot execute reload script at: $RELOAD_SCRIPT"
[[ -f "$SERVERCLASS_PATH" ]] || die "serverclass.conf not found at: $SERVERCLASS_PATH"

LOCK_F="$SERVERCLASS_PATH.lock"
TS="$(date +%Y%m%d-%H%M%S)"
BACKUP="${SERVERCLASS_PATH}.bak.${TS}"
TMP="${SERVERCLASS_PATH}.tmp.${TS}.$$"

# single-writer lock
exec 9>"$LOCK_F" || die "Cannot open lock file: $LOCK_F"
flock -n 9 || die "Another process is modifying serverclass.conf. Try again shortly."
trap 'flock -u 9' EXIT

info "Backing up serverclass.conf -> $BACKUP"
cp -p "$SERVERCLASS_PATH" "$BACKUP"

# Ensure stanza exists
if ! grep -qE "^\[serverClass:${CLASS}\]\s*$" "$SERVERCLASS_PATH"; then
  info "Creating stanza [serverClass:${CLASS}]"
  {
    printf "\n[serverClass:%s]\n" "$CLASS"
  } >> "$SERVERCLASS_PATH"
fi

# Check if host already present
if awk -v cls="$CLASS" -v h="$HOST" '
  BEGIN { in_section=0; found=0 }
  /^\[serverClass:/ { in_section = ($0 == "[serverClass:" cls "]") }
  in_section && /^[[:space:]]*whitelist\.[0-9]+[[:space:]]*=/ {
      if ($0 ~ ("=\\s*\\^" h "\\$")) found=1
  }
  END { exit(found ? 0 : 1) }
' "$SERVERCLASS_PATH"; then
  info "Host already present in [serverClass:${CLASS}] whitelist: ^${HOST}\$"
  ALREADY_PRESENT=1
else
  ALREADY_PRESENT=0
fi

ADDED_BLOCK=0
IDX=""

if [[ "$ALREADY_PRESENT" -eq 0 ]]; then
  # Find next whitelist.<n>
  IDX="$(awk -v cls="$CLASS" '
    BEGIN { in_section=0; max=-1 }
    /^\[serverClass:/ { in_section = ($0 == "[serverClass:" cls "]") }
    in_section && /^[[:space:]]*whitelist\.[0-9]+[[:space:]]*=/ {
      line=$0
      # Extract the number after "whitelist."
      sub(/.*whitelist\./, "", line)
      sub(/[^0-9].*/, "", line)
      n=line+0
      if (n>max) max=n
    }
    END { print max+1 }
  ' "$SERVERCLASS_PATH")"
  [[ "$IDX" =~ ^[0-9]+$ ]] || die "Failed to compute next whitelist index."

  info "Inserting whitelist.${IDX} = ^${HOST}\$ into [serverClass:${CLASS}]"

  # Insert BEGIN/whitelist/END at the end of the target stanza (works even if stanza isn't last)
  awk -v cls="$CLASS" -v host="$HOST" -v idx="$IDX" -v ts="$TS" '
    BEGIN { in_section=0; inserted=0 }
    /^\[serverClass:/ {
        if (in_section && !inserted) {
            print "  # BEGIN RESTART_UF " host " " ts " " idx
            print "  whitelist." idx " = ^" host "$"
            print "  # END RESTART_UF " host " " ts " " idx
            inserted=1
        }
        in_section = ($0 == "[serverClass:" cls "]")
        print $0
        next
    }
    { print $0 }
    END {
        if (in_section && !inserted) {
            print "  # BEGIN RESTART_UF " host " " ts " " idx
            print "  whitelist." idx " = ^" host "$"
            print "  # END RESTART_UF " host " " ts " " idx
        }
    }
  ' "$SERVERCLASS_PATH" > "$TMP"
  mv "$TMP" "$SERVERCLASS_PATH"
  ADDED_BLOCK=1
fi

# Reload DS for the class
info "Reloading Deployment Server for class: ${CLASS}"
set +e
"$RELOAD_SCRIPT" "$CLASS"
RC=$?
set -e

if [[ $RC -ne 0 ]]; then
  info "Reload failed (exit $RC). Rolling back changes."
  if [[ "$ADDED_BLOCK" -eq 1 ]]; then
    cp -p "$BACKUP" "$SERVERCLASS_PATH"
  fi
  die "Deployment reload failed."
fi

# On success, remove only the block we added
if [[ "$ADDED_BLOCK" -eq 1 ]]; then
  info "Reload succeeded. Removing temporary whitelist block."
  # remove the exact marked block
  sed -i "/# BEGIN RESTART_UF ${HOST} ${TS} ${IDX}/,/# END RESTART_UF ${HOST} ${TS} ${IDX}/d" "$SERVERCLASS_PATH"
  info "Temporary entry removed."
else
  info "No temporary entry was added (host already present); nothing to remove."
fi

info "Done."
