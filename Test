#!/usr/bin/env bash
# Simple Cribl discover script (SFTP)
# Lists files updated since last run and prints each remote path on its own line.

set -euo pipefail

# Required env vars:
#   SFTP_HOST, SFTP_USER, SFTP_PASS, SFTP_DIR
# Optional:
#   SFTP_PORT (default 22)
#   SFTP_GRACE (seconds grace window, default 60)

SFTP_PORT="${SFTP_PORT:-22}"
SFTP_GRACE="${SFTP_GRACE:-60}"
STATE_FILE="/app/cribl/sftp_script_collect_state.txt"

: "${SFTP_HOST:?set SFTP_HOST}"
: "${SFTP_USER:?set SFTP_USER}"
: "${SFTP_PASS:?set SFTP_PASS}"
: "${SFTP_DIR:?set SFTP_DIR}"

LAST=0
[[ -f "$STATE_FILE" ]] && LAST="$(cat "$STATE_FILE" 2>/dev/null || echo 0)"
(( LAST > SFTP_GRACE )) && LAST=$(( LAST - SFTP_GRACE ))

LIST="$(SSHPASS="$SFTP_PASS" sshpass -e sftp -q -P "$SFTP_PORT" "$SFTP_USER@$SFTP_HOST" <<< "ls -l \"$SFTP_DIR\"" || true)"

while IFS= read -r line; do
  [[ -z "$line" ]] && continue
  [[ "${line:0:1}" != "-" ]] && continue

  mon=$(awk '{print $6}' <<<"$line")
  day=$(awk '{print $7}' <<<"$line")
  tmy=$(awk '{print $8}' <<<"$line")
  name=$(awk '{for (i=9;i<=NF;i++) printf $i (i<NF?" ":"");}' <<<"$line")
  [[ -z "$name" ]] && continue

  if [[ "$tmy" == *:* ]]; then
    ts="$mon $day $tmy"
  else
    ts="$mon $day 00:00:00 $tmy"
  fi

  mt=$(date -d "$ts" +%s 2>/dev/null || echo "")
  [[ -z "$mt" ]] && continue

  if (( mt > LAST )); then
    echo "$SFTP_DIR/$name"
  fi
done <<< "$LIST"

date +%s > "$STATE_FILE" 2>/dev/null || true










#!/usr/bin/env bash
# Simple Cribl collect script (SFTP)
# Reads CRIBL_COLLECT_ARG (remote path) and streams the file to stdout.

set -euo pipefail

# Required env vars:
#   SFTP_HOST, SFTP_USER, SFTP_PASS
# Optional:
#   SFTP_PORT (default 22)

SFTP_PORT="${SFTP_PORT:-22}"

: "${SFTP_HOST:?set SFTP_HOST}"
: "${SFTP_USER:?set SFTP_USER}"
: "${SFTP_PASS:?set SFTP_PASS}"

if [[ -z "${CRIBL_COLLECT_ARG:-}" ]]; then
  echo "Missing CRIBL_COLLECT_ARG (expected remote file path)" >&2
  exit 2
fi

REMOTE_PATH="$CRIBL_COLLECT_ARG"

SSHPASS="$SFTP_PASS" sshpass -e sftp -q -P "$SFTP_PORT" "$SFTP_USER@$SFTP_HOST" <<EOF
get "$REMOTE_PATH" /dev/stdout
EOF
